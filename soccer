import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder, StandardScaler
import os

class AutoPreprocessor:
    def __init__(self, file_path, target_col=None):
        """
        file_path : CSV 파일 경로
        target_col : 타겟 컬럼 이름 (없으면 None)
        """
        self.file_path = file_path
        self.target_col = target_col
        self.df = pd.read_csv(file_path)
        self.scaler = StandardScaler()
        self.report = ""

    def basic_info(self):
        print(" [1] 데이터 기본 정보")
        print(self.df.head())
        print(self.df.info())
        print(self.df.describe())

    def handle_missing(self):
        print("\n [2] 결측치 처리")
        missing_cols = self.df.columns[self.df.isnull().any()]
        if len(missing_cols) == 0:
            print(" - 결측치 없음")
        else:
            for col in missing_cols:
                if self.df[col].dtype == 'object':
                    mode_val = self.df[col].mode()[0]
                    self.df[col].fillna(mode_val, inplace=True)
                    print(f" - {col}: 최빈값 '{mode_val}'로 채움")
                else:
                    median_val = self.df[col].median()
                    self.df[col].fillna(median_val, inplace=True)
                    print(f" - {col}: 중앙값 {median_val}로 채움")

    def detect_outliers(self):
        print("\n [3] 이상치 탐지 (간단 시각화)")
        num_cols = self.df.select_dtypes(include=np.number).columns
        if len(num_cols) == 0:
            print(" - 수치형 컬럼 없음")
            return
        
        fig, axes = plt.subplots(1, min(3, len(num_cols)), figsize=(5 * min(3, len(num_cols)), 5))
        if len(num_cols) == 1:
            axes = [axes]
        for idx, col in enumerate(num_cols[:3]):
            sns.boxplot(y=self.df[col], ax=axes[idx])
            axes[idx].set_title(f'Boxplot of {col}')
        plt.tight_layout()
        plt.show()
        print(" - 극단 이상치가 보이면 추가 조치 필요 (현재 자동 제거는 하지 않음)")

    def encode_categoricals(self):
        print("\n [4] 범주형 인코딩")
        cat_cols = self.df.select_dtypes(include='object').columns
        if len(cat_cols) == 0:
            print(" - 범주형 컬럼 없음")
            return
        
        le = LabelEncoder()
        for col in cat_cols:
            self.df[col] = le.fit_transform(self.df[col])
            print(f" - {col}: Label Encoding 적용 완료")

    def normalize_numeric(self):
        print("\n [5] 수치형 정규화")
        num_cols = self.df.select_dtypes(include=np.number).columns
        if self.target_col and self.target_col in num_cols:
            num_cols = num_cols.drop(self.target_col)

        if len(num_cols) == 0:
            print(" - 정규화할 수치형 컬럼 없음")
            return
        
        self.df[num_cols] = self.scaler.fit_transform(self.df[num_cols])
        print(f" - {list(num_cols)} 컬럼 정규화 완료")

    def create_features(self):
        print("\n [6] 파생변수 생성")
        num_cols = self.df.select_dtypes(include=np.number).columns
        if self.target_col and self.target_col in num_cols:
            num_cols = num_cols.drop(self.target_col)

        if len(num_cols) >= 2:
            # 여러 점수의 평균 같은 거 만들기
            self.df['feature_avg'] = self.df[num_cols].mean(axis=1)
            print(" - feature_avg (수치형 평균) 생성 완료")
        else:
            print(" - 파생변수 생성 생략 (수치형 컬럼 부족)")
    
    def save_files(self, output_dir="output"):
        print("\n [7] 파일 저장 및 README 생성")
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
        
        output_file = os.path.join(output_dir, os.path.basename(self.file_path).replace(".csv", "_cleaned.csv"))
        self.df.to_csv(output_file, index=False)
        
        readme_content = (
            f"본 데이터는 결측치 처리, 범주형 인코딩, 수치형 정규화, "
            f"파생변수(feature_avg) 생성 과정을 거쳐 전처리되었습니다. "
            f"최종 파일은 {os.path.basename(output_file)} 입니다."
        )
        with open(os.path.join(output_dir, "README.txt"), "w") as f:
            f.write(readme_content)
        
        print(f" - 전처리 파일 저장: {output_file}")
        print(f" - README.txt 저장 완료")
    
    def run_all(self):
        self.basic_info()
        self.handle_missing()
        self.detect_outliers()
        self.encode_categoricals()
        self.normalize_numeric()
        self.create_features()
        self.save_files()
